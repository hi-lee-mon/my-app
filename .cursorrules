# Git Commit Message Rules
# Based on AngularJS Git Commit Message Conventions

## コミットメッセージの形式
すべてのコミットメッセージは以下の形式に従う必要があります：

```
<type>(<scope>): <subject>

<body>

<footer>
```

## 基本ルール
1. ヘッダー行（1行目）は100文字以内
2. 各セクションは空行で区切る
3. 日本語でのコミットメッセージを推奨

## Type（必須）
以下のタイプのいずれかを使用：

- `feat`: 新機能の追加
- `fix`: バグ修正
- `docs`: ドキュメントのみの変更
- `style`: コードの意味に影響しない変更（空白、フォーマット、セミコロンの欠落など）
- `refactor`: バグ修正や機能追加ではないコードの変更
- `test`: テストの追加や既存テストの修正
- `chore`: ビルドプロセス、補助ツール、ライブラリの変更

## Scope（任意）
変更箇所を特定する文字列：
- `auth` - 認証関連
- `api` - API関連
- `ui` - UI/コンポーネント関連
- `database` - データベース関連
- `config` - 設定関連
- `*` - 複数の箇所にまたがる変更

## Subject（必須）
- 変更の簡潔な説明
- 命令形、現在時制を使用（「追加する」「修正する」）
- 最初の文字は小文字
- 末尾にピリオド（.）は付けない
- 50文字以内を推奨

## Body（任意）
- 変更の詳細な説明
- 命令形、現在時制を使用
- 変更の動機と以前の動作との違いを説明
- 72文字で改行を推奨

## Footer（任意）
### 破壊的変更
```
BREAKING CHANGE: 変更の説明

移行方法の詳細説明
```

### Issue参照
```
Closes #123
Closes #123, #245, #992
```

## リバートコミット
```
revert: <元のコミットのヘッダー>

This reverts commit <hash>.
```

## 良い例
```
feat(auth): ユーザー認証機能を追加

Google OAuth2.0を使用した認証システムを実装
- ログイン/ログアウト機能
- セッション管理
- 権限チェック機能

Closes #123
```

```
fix(api): データ取得時のnullエラーを修正

ユーザーデータが存在しない場合の例外処理を追加

Closes #456
```

```
docs(readme): セットアップ手順を更新

Node.js 18.x の要件を追加し、インストール手順を明確化
```

```
style(components): ESLintエラーを修正

セミコロンの欠落とインデントの不整合を修正
```

## 悪い例（避けるべき）
```
❌ Fix bug
❌ Update files
❌ WIP
❌ feat: 新機能追加しました。
❌ fix(API): Null pointer exception fixed
```

## 追加のガイドライン
- コミットは論理的な単位で分割する
- 1つのコミットで1つの変更を行う
- テストが通ることを確認してからコミットする
- レビュー時に理解しやすいメッセージを心がける

## CHANGELOGの自動生成
このフォーマットに従うことで、以下のコマンドでCHANGELOGを自動生成できます：

```bash
# 新機能のリスト
git log <last-release> HEAD --grep="feat" --pretty=format:"%s"

# バグ修正のリスト  
git log <last-release> HEAD --grep="fix" --pretty=format:"%s"

# 全てのコミットメッセージ
git log <last-release> HEAD --pretty=format:"%s"
```
